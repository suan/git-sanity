#!/usr/bin/env bash

function output() {
  echo -e "$*"
}
function info() {
  output "\033[32m${*}\033[0m"
}
function error() {
  output "\033[31m${1}\033[0m" && exit 1
}

if [[ $# != 1 ]]; then
  echo "Usage: git update <branch>" && exit 1
fi

current_branch=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
updatesource=`git config --get sanity.updatesource`
if [[ $updatesource == '' ]]; then updatesource='upstream'; fi
branch_to_update=$1
branch_remote=`git config --get branch.$branch_to_update.remote`
if [[ $branch_remote == '' ]]; then branch_remote='origin'; fi



if [[ `git config --get remote.$updatesource.url` == '' ]]; then
  error "source '$updatesource' for git-update doesn't exist! Do \`git config sanity.updatesource <upstream remote name>\` to change it."
fi

git show-ref --verify --quiet refs/heads/$branch_to_update || error "branch $branch_to_update does not exist!"

if [[ $branch_remote == $updatesource ]]; then
  error "Both updatesource and $branch_to_update's default remote are set to '$updatesource'. This is probably not what you mean!"
fi



# ======= Here's the meat of the script: ==========
set -o errexit    # From here on out, exit on error
if [[ $branch_to_update != $current_branch ]]; then
  if ! git diff-index --quiet HEAD; then
    git stash
    stashed=true
  fi
  git checkout $branch_to_update
fi

git pull $updatesource master
git push $branch_remote $branch_to_update
info "$branch_to_update successfully updated from remote '$updatesource'"

if [[ $branch_to_update != $current_branch ]]; then
  git checkout $current_branch
  [ $stashed ] && git stash pop
fi
